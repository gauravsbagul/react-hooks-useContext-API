{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/NavBar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","console","log","type","book","filter","id","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","NavBar","useContext","className","length","BookDetails","onClick","title","author","BookList","map","key","NewBookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6MAAaA,EAAc,SAACC,EAAOC,GAGjC,OAFAC,QAAQC,IAAI,8BAA+BF,GAC3CC,QAAQC,IAAI,6BAA8BH,GAClCC,EAAOG,MACb,IAAK,WACH,MAAM,GAAN,mBAAWJ,GAAX,CAAkBC,EAAOI,OAE3B,IAAK,cACH,OAAOL,EAAMM,QAAO,SAACD,GAAD,OAAUA,EAAKE,KAAON,EAAOM,MAEnD,QACE,OAAOP,ICPAQ,EAAcC,0BAoBZC,EAlBa,SAACC,GAAW,IAAD,EACXC,qBAAWb,EAAa,IAAI,WACpD,IAAMc,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHR,mBAC9BK,EAD8B,KACvBC,EADuB,KAWrC,OALAC,qBAAU,WAER,OADAN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,IACtC,eACN,CAACA,IAGF,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aACnCR,EAAMc,WCJEC,EAXA,WAAO,IACZR,EAAUS,qBAAWnB,GAArBU,MAER,OADAhB,QAAQC,IAAI,wBAAyBe,GAEnC,yBAAKU,UAAU,UACb,kDACA,iDAAuBV,EAAMW,OAA7B,8BCISC,EAXK,SAAC,GAAc,IAAZzB,EAAW,EAAXA,KACbc,EAAaQ,qBAAWnB,GAAxBW,SAER,OACE,wBAAIY,QAAS,kBAAMZ,EAAS,CAAEf,KAAM,cAAeG,GAAIF,EAAKE,OAC1D,yBAAKqB,UAAU,SAASvB,EAAK2B,OAC7B,yBAAKJ,UAAU,UAAUvB,EAAK4B,UCarBC,EAhBE,WAAO,IACdhB,EAAUS,qBAAWnB,GAArBU,MAER,OAAOA,EAAMW,OACX,yBAAKD,UAAU,aACb,4BACGV,EAAMiB,KAAI,SAAC9B,GACV,OAAO,kBAAC,EAAD,CAAaA,KAAMA,EAAM+B,IAAK/B,EAAKE,UAKhD,yBAAKqB,UAAU,SAAf,qBCmBWS,EAlCK,WAAO,IAAD,EACIV,qBAAWnB,GAA/BU,EADgB,EAChBA,MAAOC,EADS,EACTA,SADS,EAEEmB,mBAAS,IAFX,mBAEjBN,EAFiB,KAEVO,EAFU,OAGID,mBAAS,IAHb,mBAGjBL,EAHiB,KAGTO,EAHS,KAcxB,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACFxB,EAAS,CACPf,KAAM,WACNC,KAAM,CAAE2B,QAAOC,SAAQ1B,GAAIW,EAAMW,OAAS,KAE5CW,EAAU,IACVD,EAAS,MAIP,2BACEnC,KAAK,OACLwC,YAAY,aACZpB,MAAOQ,EACPa,SAAU,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOtB,QACnCuB,UAAQ,IAEV,2BACE3C,KAAK,OACLwC,YAAY,cACZpB,MAAOS,EACPY,SAAU,SAACH,GAAD,OAAOF,EAAUE,EAAEI,OAAOtB,QACpCuB,UAAQ,IAEV,2BAAO3C,KAAK,SAASoB,MAAM,eChBlBwB,EAZH,WACV,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,a","file":"static/js/main.2f75f2e7.chunk.js","sourcesContent":["export const bookReducer = (state, action) => {\r\n  console.log(\"TCL:: bookReducer -> action\", action)\r\n  console.log(\"TCL:: bookReducer -> state\", state)\r\n  switch (action.type) {\r\n    case \"ADD_BOOK\":\r\n      return [...state, action.book]\r\n      break\r\n    case \"REMOVE_BOOK\":\r\n      return state.filter((book) => book.id !== action.id)\r\n      break\r\n    default:\r\n      return state\r\n      break\r\n  }\r\n}\r\n","// @ts-nocheck\r\nimport React, { createContext, useReducer, useEffect } from \"react\"\r\nimport { bookReducer } from \"./../reducers/bookReducer\"\r\n\r\nexport const BookContext = createContext()\r\n\r\nconst BookContextProvider = (props) => {\r\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n    const localData = localStorage.getItem(\"books\")\r\n    return localData ? JSON.parse(localData) : []\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"books\", JSON.stringify(books))\r\n    return () => {}\r\n  }, [books])\r\n\r\n  return (\r\n    <BookContext.Provider value={{ books, dispatch }}>\r\n      {props.children}\r\n    </BookContext.Provider>\r\n  )\r\n}\r\n\r\nexport default BookContextProvider\r\n","// @ts-nocheck\r\nimport React, { useContext } from \"react\"\r\nimport { BookContext } from \"./../contexts/BookContext\"\r\n\r\nconst NavBar = () => {\r\n  const { books } = useContext(BookContext)\r\n  console.log(\"TCL:: NavBar -> books\", books)\r\n  return (\r\n    <div className=\"navBar\">\r\n      <h1>Ninja Reading List</h1>\r\n      <p>Currently you have {books.length} books to get through...</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","import React, { useContext } from \"react\"\r\nimport { BookContext } from \"./../contexts/BookContext\"\r\n\r\nconst BookDetails = ({ book }) => {\r\n  const { dispatch } = useContext(BookContext)\r\n\r\n  return (\r\n    <li onClick={() => dispatch({ type: \"REMOVE_BOOK\", id: book.id })}>\r\n      <div className=\"title\">{book.title}</div>\r\n      <div className=\"author\">{book.author}</div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default BookDetails\r\n","// @ts-nocheck\r\n\r\nimport React, { useContext } from \"react\"\r\nimport { BookContext } from \"./../contexts/BookContext\"\r\nimport BookDetails from \"./BookDetails\"\r\n\r\nconst BookList = () => {\r\n  const { books } = useContext(BookContext)\r\n\r\n  return books.length ? (\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        {books.map((book) => {\r\n          return <BookDetails book={book} key={book.id} />\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className=\"empty\">No books to read</div>\r\n  )\r\n}\r\n\r\nexport default BookList\r\n","import React, { useContext, useState } from \"react\"\r\nimport { BookContext } from \"./../contexts/BookContext\"\r\n\r\nconst NewBookForm = () => {\r\n  const { books, dispatch } = useContext(BookContext)\r\n  const [title, setTitle] = useState(\"\")\r\n  const [author, setAuthor] = useState(\"\")\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    dispatch({\r\n      type: \"ADD_BOOK\",\r\n      book: { title, author, id: books.length + 1 },\r\n    })\r\n    setAuthor(\"\")\r\n    setTitle(\"\")\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Book title\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Book author\"\r\n        value={author}\r\n        onChange={(e) => setAuthor(e.target.value)}\r\n        required\r\n      />\r\n      <input type=\"submit\" value=\"add book\" />\r\n    </form>\r\n  )\r\n}\r\nexport default NewBookForm\r\n","import React from \"react\"\nimport NavBar from \"./components/NavBar\"\nimport BookContextProvider from \"./contexts/BookContext\"\nimport BookList from \"./components/BookList\"\nimport NewBookForm from \"./components/BookForm\"\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <NavBar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}